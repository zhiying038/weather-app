{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.527bf4f771fa990a10f3.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport { Row } from \"react-grid-system\";\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport CurrentWeather from \"../components/CurrentWeather\";\r\nimport SearchCity from \"../components/SearchCity\";\r\nimport \"../styles/styles.scss\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.apiurl = \"http://api.openweathermap.org/data/2.5\";\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      data: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n    this.retrieveData = this.retrieveData.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    const weatherUrl = `${this.apiurl}/weather?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    axios.get(weatherUrl).then(res => {\r\n      const detail = res.data;\r\n      this.setState({\r\n        city: detail.name,\r\n        temperature: detail.main.temp,\r\n        description: detail.weather[0].description,\r\n        feels_like: detail.main.feels_like,\r\n        humidity: detail.main.humidity,\r\n        highTemp: detail.main.temp_max,\r\n        lowTemp: detail.main.temp_min,\r\n        country: detail.sys.country\r\n      });\r\n    });\r\n  }\r\n\r\n  /* Display date in the format of DD/MM/YY */\r\n  formatDate(dateData) {\r\n    let date = dateData.split(\" \")[0].split(\"-\");\r\n    return `${date[2]}/${date[1]}/${date[0]}`;\r\n  }\r\n\r\n  /* Display forecast for 5 days according to the local system time */\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let jsonData = data.filter(data => {\r\n      let time = data.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return data;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: jsonData\r\n    });\r\n  }\r\n\r\n  submitHandler(input) {\r\n    input.preventDefault();\r\n    this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  changeHandler(input) {\r\n    input.preventDefault();\r\n    this.setState({\r\n      activeCity: input.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    if (this.state.data) {\r\n      cards = this.state.data.map(data => {\r\n        return (\r\n          <WeatherInfo\r\n            date={this.formatDate(data.dt_txt)}\r\n            maxTemp={data.main.temp_max}\r\n            minTemp={data.main.temp_min}\r\n            humidity={data.main.humidity}\r\n            description={data.weather[0].description}\r\n            icon={data.weather[0].icon}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <SearchCity\r\n          changeHandler={this.changeHandler}\r\n          submitHandler={this.submitHandler}\r\n          activeCity={this.state.activeCity}\r\n        />\r\n        <CurrentWeather\r\n          city={this.state.city}\r\n          temperature={this.state.temperature}\r\n          description={this.state.description}\r\n          feels_like={this.state.feels_like}\r\n          highTemp={this.state.highTemp}\r\n          lowTemp={this.state.lowTemp}\r\n          humidity={this.state.humidity}\r\n          country={this.state.country}\r\n        />\r\n        <br />\r\n        <div className=\"section\">\r\n          <div className=\"container\">\r\n            <div className=\"columns\">\r\n              <div className=\"column tile is-ancestor is-centered\">\r\n                <div className=\"tile\">\r\n                  <div className=\"tile is-child\">\r\n                    <Row>{cards}</Row>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAXA;AAYA;AACA;;;;;;;;;AAEA;AACA;;;;;;;;;;AAEA;;;;;;;;AACA;;AACA;AAGA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;;;;;;;;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AArJA;AACA;;;;;A","sourceRoot":""}