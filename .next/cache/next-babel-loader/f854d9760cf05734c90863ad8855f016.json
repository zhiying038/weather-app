{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport \"../styles/styles.scss\";\nimport { Container, Row, Col } from \"react-grid-system\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    this.apiurl = \"http://api.openweathermap.org/data/2.5\";\n    this.state = {\n      activeCity: \"Calgary\",\n      forecast: null\n    };\n    this.APIRequest = this.APIRequest.bind(this);\n    this.retrieveData = this.retrieveData.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.APIRequest(this.state.activeCity);\n  }\n\n  async APIRequest(cityName) {\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\n    await axios.get(forecastUrl).then(res => {\n      this.retrieveData(res.data.list);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  formatDate(dateTxt) {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = dateTxt.split(\" \")[0].split(\"-\");\n    return `${date[2]} ${months[date[1]]}`;\n  }\n\n  formatTime(dateTxt) {\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\n  }\n\n  retrieveData(data) {\n    let date = new Date();\n    let hours = date.getHours();\n    let timeslot = \"\";\n\n    if (hours >= 0 && hours < 3) {\n      timeslot = \"00:00:00\";\n    } else if (hours >= 3 && hours < 6) {\n      timeslot = \"03:00:00\";\n    } else if (hours >= 6 && hours < 9) {\n      timeslot = \"06:00:00\";\n    } else if (hours >= 9 && hours < 12) {\n      timeslot = \"09:00:00\";\n    } else if (hours >= 12 && hours < 15) {\n      timeslot = \"12:00:00\";\n    } else if (hours >= 15 && hours < 18) {\n      timeslot = \"15:00:00\";\n    } else if (hours >= 18 && hours < 21) {\n      timeslot = \"18:00:00\";\n    } else if (hours >= 21) {\n      timeslot = \"21:00:00\";\n    }\n\n    let json = data.filter(c => {\n      let time = c.dt_txt.split(\" \")[1];\n\n      if (time === timeslot) {\n        return c;\n      }\n    });\n    this.setState({\n      data: json\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n\n    if (this.state.forecast) {\n      cards = this.state.forecast.map(c => {\n        return __jsx(WeatherInfo, {\n          key: id++,\n          time: this.formatTime(c.dt_txt),\n          date: this.formatDate(c.dt_txt),\n          highTemp: c.main.temp_max,\n          lowTemp: c.main.temp_min,\n          humidity: c.main.humidity,\n          description: c.weather[0].description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Weather Application\")), __jsx(\"h2\", {\n      className: \"has-text-centered is-size-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Weather Forecast\"), __jsx(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, __jsx(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"ABC\"), cards)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","Head","WeatherInfo","Container","Row","Col","Index","Component","constructor","props","apikey","apiurl","state","activeCity","forecast","APIRequest","bind","retrieveData","componentDidMount","cityName","forecastUrl","get","then","res","data","list","catch","error","console","log","formatDate","dateTxt","months","date","split","formatTime","parseInt","Date","hours","getHours","timeslot","json","filter","c","time","dt_txt","setState","render","cards","id","map","main","temp_max","temp_min","humidity","weather","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport \"../styles/styles.scss\";\r\nimport { Container, Row, Col } from \"react-grid-system\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.apiurl = \"http://api.openweathermap.org/data/2.5\";\r\n    this.state = {\r\n      activeCity: \"Calgary\",\r\n      forecast: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n    this.retrieveData = this.retrieveData.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  formatDate(dateTxt) {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = dateTxt.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${months[date[1]]}`;\r\n  }\r\n\r\n  formatTime(dateTxt) {\r\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return c;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: json\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(c => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            time={this.formatTime(c.dt_txt)}\r\n            date={this.formatDate(c.dt_txt)}\r\n            highTemp={c.main.temp_max}\r\n            lowTemp={c.main.temp_min}\r\n            humidity={c.main.humidity}\r\n            description={c.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <h2 className=\"has-text-centered is-size-2\">Weather Forecast</h2>\r\n        <Container>\r\n          <Row>\r\n            <Col lg={12}>\r\n              <Row>\r\n                <h1>ABC</h1>\r\n                {cards}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}