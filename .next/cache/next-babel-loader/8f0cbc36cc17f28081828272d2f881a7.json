{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport { Container, Row, Col } from \"react-grid-system\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport \"../styles/styles.scss\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    this.apiurl = \"http://api.openweathermap.org/data/2.5\";\n    this.state = {\n      activeCity: \"Kuala Lumpur\",\n      data: null\n    };\n    this.APIRequest = this.APIRequest.bind(this);\n    this.retrieveData = this.retrieveData.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.APIRequest(this.state.activeCity);\n  }\n\n  async APIRequest(cityName) {\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\n    await axios.get(forecastUrl).then(res => {\n      this.retrieveData(res.data.list);\n    }).catch(error => {\n      console.log(error);\n    });\n    const weatherUrl = `${this.apiurl}/weather?q=${cityName}&units=metric&appid=${this.apikey}`;\n    axios.get(weatherUrl).then(res => {\n      const detail = res.data;\n      this.setState({\n        city: detail.name,\n        temperature: detail.main.temp,\n        description: detail.weather[0].description,\n        feels_like: detail.main.feels_like,\n        humidity: detail.main.humidity,\n        highTemp: detail.main.temp_max\n      });\n    });\n  }\n\n  formatDate(dateTxt) {\n    let date = dateTxt.split(\" \")[0].split(\"-\");\n    return `${date[2]}/${date[1]}/${date[0]}`;\n  }\n\n  formatTime(dateTxt) {\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\n  }\n\n  retrieveData(data) {\n    let date = new Date();\n    let hours = date.getHours();\n    let timeslot = \"\";\n\n    if (hours >= 0 && hours < 3) {\n      timeslot = \"00:00:00\";\n    } else if (hours >= 3 && hours < 6) {\n      timeslot = \"03:00:00\";\n    } else if (hours >= 6 && hours < 9) {\n      timeslot = \"06:00:00\";\n    } else if (hours >= 9 && hours < 12) {\n      timeslot = \"09:00:00\";\n    } else if (hours >= 12 && hours < 15) {\n      timeslot = \"12:00:00\";\n    } else if (hours >= 15 && hours < 18) {\n      timeslot = \"15:00:00\";\n    } else if (hours >= 18 && hours < 21) {\n      timeslot = \"18:00:00\";\n    } else if (hours >= 21) {\n      timeslot = \"21:00:00\";\n    }\n\n    let json = data.filter(c => {\n      let time = c.dt_txt.split(\" \")[1];\n\n      if (time === timeslot) {\n        return c;\n      }\n    });\n    this.setState({\n      data: json\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n\n    if (this.state.data) {\n      cards = this.state.data.map(c => {\n        return __jsx(WeatherInfo, {\n          key: id++,\n          time: this.formatTime(c.dt_txt),\n          date: this.formatDate(c.dt_txt),\n          maxTemp: c.main.temp_max,\n          minTemp: c.main.temp_min,\n          humidity: c.main.humidity,\n          description: c.weather[0].description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Weather Application\")), __jsx(\"h2\", {\n      className: \"has-text-centered is-size-2 has-text-black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Weather Forecast\"), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), __jsx(CurrentWeather, {\n      city: this.state.city,\n      temperature: this.state.temperature,\n      description: this.state.description,\n      feels_like: this.state.feels_like,\n      highTemp: this.state.highTemp,\n      lowTemp: this.state.lowTemp,\n      humidity: this.state.humidity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), __jsx(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, cards)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","Head","Container","Row","Col","WeatherInfo","CurrentWeather","Index","Component","constructor","props","apikey","apiurl","state","activeCity","data","APIRequest","bind","retrieveData","componentDidMount","cityName","forecastUrl","get","then","res","list","catch","error","console","log","weatherUrl","detail","setState","city","name","temperature","main","temp","description","weather","feels_like","humidity","highTemp","temp_max","formatDate","dateTxt","date","split","formatTime","parseInt","Date","hours","getHours","timeslot","json","filter","c","time","dt_txt","render","cards","id","map","temp_min","lowTemp"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport { Container, Row, Col } from \"react-grid-system\";\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport CurrentWeather from \"../components/CurrentWeather\";\r\nimport \"../styles/styles.scss\";\r\n\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.apiurl = \"http://api.openweathermap.org/data/2.5\";\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      data: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n    this.retrieveData = this.retrieveData.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n      const weatherUrl = `${this.apiurl}/weather?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n      axios.get(weatherUrl).then(res => {\r\n        const detail = res.data;\r\n        this.setState({\r\n          city: detail.name,\r\n          temperature: detail.main.temp,\r\n          description: detail.weather[0].description,\r\n          feels_like: detail.main.feels_like,\r\n          humidity: detail.main.humidity,\r\n          highTemp: detail.main.temp_max,\r\n        });\r\n      })\r\n  }\r\n\r\n  formatDate(dateTxt) {\r\n    let date = dateTxt.split(\" \")[0].split(\"-\");\r\n    return `${date[2]}/${date[1]}/${date[0]}`;\r\n  }\r\n\r\n  formatTime(dateTxt) {\r\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return c;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: json\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.data) {\r\n      cards = this.state.data.map(c => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            time={this.formatTime(c.dt_txt)}\r\n            date={this.formatDate(c.dt_txt)}\r\n            maxTemp={c.main.temp_max}\r\n            minTemp={c.main.temp_min}\r\n            humidity={c.main.humidity}\r\n            description={c.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <h2 className=\"has-text-centered is-size-2 has-text-black\">\r\n          Weather Forecast\r\n        </h2>\r\n        <hr />\r\n        <CurrentWeather \r\n          city={this.state.city}\r\n          temperature={this.state.temperature}\r\n          description={this.state.description}\r\n          feels_like={this.state.feels_like}\r\n          highTemp={this.state.highTemp}\r\n          lowTemp={this.state.lowTemp}\r\n          humidity={this.state.humidity}\r\n        />\r\n        <Container>\r\n          <Row>\r\n            <Col lg={12}>\r\n              <Row>{cards}</Row>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}