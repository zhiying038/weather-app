{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather-app\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport { Row } from \"react-grid-system\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport SearchCity from \"../components/SearchCity\";\nimport \"../styles/styles.scss\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    _this.apiurl = \"http://api.openweathermap.org/data/2.5\";\n    _this.state = {\n      activeCity: \"Kuala Lumpur\",\n      data: null\n    };\n    _this.APIRequest = _this.APIRequest.bind(_assertThisInitialized(_this));\n    _this.retrieveData = _this.retrieveData.bind(_assertThisInitialized(_this));\n    _this.submitHandler = _this.submitHandler.bind(_assertThisInitialized(_this));\n    _this.changeHandler = _this.changeHandler.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.APIRequest(this.state.activeCity));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"APIRequest\",\n    value: function APIRequest(cityName) {\n      var _this2 = this;\n\n      var forecastUrl, weatherUrl;\n      return _regeneratorRuntime.async(function APIRequest$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              forecastUrl = \"\".concat(this.apiurl, \"/forecast?q=\").concat(cityName, \"&units=metric&appid=\").concat(this.apikey);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(forecastUrl).then(function (res) {\n                _this2.retrieveData(res.data.list);\n              })[\"catch\"](function (error) {\n                console.log(error);\n              }));\n\n            case 3:\n              weatherUrl = \"\".concat(this.apiurl, \"/weather?q=\").concat(cityName, \"&units=metric&appid=\").concat(this.apikey);\n              axios.get(weatherUrl).then(function (res) {\n                var detail = res.data;\n\n                _this2.setState({\n                  city: detail.name,\n                  temperature: detail.main.temp,\n                  description: detail.weather[0].description,\n                  feels_like: detail.main.feels_like,\n                  humidity: detail.main.humidity,\n                  highTemp: detail.main.temp_max,\n                  lowTemp: detail.main.temp_min\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(dateTxt) {\n      var date = dateTxt.split(\" \")[0].split(\"-\");\n      return \"\".concat(date[2], \"/\").concat(date[1], \"/\").concat(date[0]);\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(dateTxt) {\n      return _parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\n    }\n  }, {\n    key: \"retrieveData\",\n    value: function retrieveData(data) {\n      var date = new Date();\n      var hours = date.getHours();\n      var timeslot = \"\";\n\n      if (hours >= 0 && hours < 3) {\n        timeslot = \"00:00:00\";\n      } else if (hours >= 3 && hours < 6) {\n        timeslot = \"03:00:00\";\n      } else if (hours >= 6 && hours < 9) {\n        timeslot = \"06:00:00\";\n      } else if (hours >= 9 && hours < 12) {\n        timeslot = \"09:00:00\";\n      } else if (hours >= 12 && hours < 15) {\n        timeslot = \"12:00:00\";\n      } else if (hours >= 15 && hours < 18) {\n        timeslot = \"15:00:00\";\n      } else if (hours >= 18 && hours < 21) {\n        timeslot = \"18:00:00\";\n      } else if (hours >= 21) {\n        timeslot = \"21:00:00\";\n      }\n\n      var json = data.filter(function (c) {\n        var time = c.dt_txt.split(\" \")[1];\n\n        if (time === timeslot) {\n          return c;\n        }\n      });\n      this.setState({\n        data: json\n      });\n    }\n  }, {\n    key: \"submitHandler\",\n    value: function submitHandler(input) {\n      input.preventDefault();\n      this.APIRequest(this.state.activeCity);\n    }\n  }, {\n    key: \"changeHandler\",\n    value: function changeHandler(input) {\n      input.preventDefault();\n      this.setState({\n        activeCity: input.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cards = \"\";\n      var id = 1;\n\n      if (this.state.data) {\n        cards = this.state.data.map(function (c) {\n          return __jsx(WeatherInfo, {\n            key: id++,\n            time: _this3.formatTime(c.dt_txt),\n            date: _this3.formatDate(c.dt_txt),\n            maxTemp: c.main.temp_max,\n            minTemp: c.main.temp_min,\n            humidity: c.main.humidity,\n            description: c.weather[0].description,\n            icon: c.weather[0].icon,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          });\n        });\n      }\n\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, __jsx(Head, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, __jsx(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Weather Application\")), __jsx(SearchCity, {\n        changeHandler: this.changeHandler,\n        submitHandler: this.submitHandler,\n        activeCity: this.state.activeCity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), __jsx(CurrentWeather, {\n        city: this.state.city,\n        temperature: this.state.temperature,\n        description: this.state.description,\n        feels_like: this.state.feels_like,\n        highTemp: this.state.highTemp,\n        lowTemp: this.state.lowTemp,\n        humidity: this.state.humidity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"column is-centered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, __jsx(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, cards))))));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather-app/pages/index.js"],"names":["React","axios","Head","Row","WeatherInfo","CurrentWeather","SearchCity","Index","props","apikey","apiurl","state","activeCity","data","APIRequest","bind","retrieveData","submitHandler","changeHandler","cityName","forecastUrl","get","then","res","list","error","console","log","weatherUrl","detail","setState","city","name","temperature","main","temp","description","weather","feels_like","humidity","highTemp","temp_max","lowTemp","temp_min","dateTxt","date","split","Date","hours","getHours","timeslot","json","filter","c","time","dt_txt","input","preventDefault","target","value","cards","id","map","formatTime","formatDate","icon","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport { Row } from \"react-grid-system\";\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport CurrentWeather from \"../components/CurrentWeather\";\r\nimport SearchCity from \"../components/SearchCity\";\r\nimport \"../styles/styles.scss\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apikey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.apiurl = \"http://api.openweathermap.org/data/2.5\";\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      data: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n    this.retrieveData = this.retrieveData.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    const weatherUrl = `${this.apiurl}/weather?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    axios.get(weatherUrl).then(res => {\r\n      const detail = res.data;\r\n      this.setState({\r\n        city: detail.name,\r\n        temperature: detail.main.temp,\r\n        description: detail.weather[0].description,\r\n        feels_like: detail.main.feels_like,\r\n        humidity: detail.main.humidity,\r\n        highTemp: detail.main.temp_max,\r\n        lowTemp: detail.main.temp_min\r\n      });\r\n    });\r\n  }\r\n\r\n  formatDate(dateTxt) {\r\n    let date = dateTxt.split(\" \")[0].split(\"-\");\r\n    return `${date[2]}/${date[1]}/${date[0]}`;\r\n  }\r\n\r\n  formatTime(dateTxt) {\r\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return c;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: json\r\n    });\r\n  }\r\n\r\n  submitHandler(input) {\r\n    input.preventDefault();\r\n    this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  changeHandler(input) {\r\n    input.preventDefault();\r\n    this.setState({\r\n      activeCity: input.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.data) {\r\n      cards = this.state.data.map(c => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            time={this.formatTime(c.dt_txt)}\r\n            date={this.formatDate(c.dt_txt)}\r\n            maxTemp={c.main.temp_max}\r\n            minTemp={c.main.temp_min}\r\n            humidity={c.main.humidity}\r\n            description={c.weather[0].description}\r\n            icon={c.weather[0].icon}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <SearchCity\r\n          changeHandler={this.changeHandler}\r\n          submitHandler={this.submitHandler}\r\n          activeCity={this.state.activeCity}\r\n        />\r\n        <CurrentWeather\r\n          city={this.state.city}\r\n          temperature={this.state.temperature}\r\n          description={this.state.description}\r\n          feels_like={this.state.feels_like}\r\n          highTemp={this.state.highTemp}\r\n          lowTemp={this.state.lowTemp}\r\n          humidity={this.state.humidity}\r\n        />\r\n        <br />\r\n        <div className=\"section\">\r\n          <div className=\"container\">\r\n            <div className=\"columns\">\r\n              <div className=\"column is-centered\">\r\n                <Row>{cards}</Row>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}