{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport WeatherCard from '../components/WeatherCard';\nvar API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\nvar API_URL = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"updateState\", function (data) {\n      var city = data.city.name;\n      var days = [];\n\n      var dayIndices = _this.getDayIndices(data);\n\n      for (var i = 0; i < 5; i++) {\n        days.push({\n          date: data.list[dayIndices[i]].dt_txt,\n          description: data.list[dayIndices[i]].weather[0].description,\n          icon: data.list[dayIndices[i]].weather[0].icon,\n          temperature: data.list[dayIndices[i]].main.temp\n        });\n      }\n\n      _this.setState({\n        city: city,\n        days: days\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"apiRequest\", function _callee(city) {\n      var data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"\".concat(API_URL, \"q=\").concat(city, \"&APPID=\").concat(API_KEY)).then(function (res) {\n                return res.json();\n              }));\n\n            case 2:\n              data = _context.sent;\n\n              if (!(data.cod === \"200\")) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(_this.updateState(data));\n\n            case 6:\n              return _context.abrupt(\"return\", true);\n\n            case 9:\n              return _context.abrupt(\"return\", false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDayIndicies\", function (data) {\n      var dayIndices = [];\n      dayIndices.push(0);\n      var index = 0;\n      var tmp = data.list[index].dt_txt.slice(8, 10);\n\n      for (var i = 0; i < 4; i++) {\n        while (tmp === data.list[index].dt_txt.slice(8, 10) || data.list[index].dt_txt.slice(11, 13) !== \"15\") {\n          index++;\n        }\n\n        dayIndices.push(index);\n        tmp = data.list[index].dt_txt.slice(8, 10);\n      }\n\n      return dayIndices;\n    });\n\n    state = {\n      city: undefined,\n      days: new Array(5)\n    };\n    _this.apiRequest = _this.apiRequest.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(WeatherCard, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","WeatherCard","API_KEY","API_URL","Index","props","data","city","name","days","dayIndices","getDayIndices","i","push","date","list","dt_txt","description","weather","icon","temperature","main","temp","setState","fetch","then","res","json","cod","updateState","index","tmp","slice","state","undefined","Array","apiRequest","bind","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport WeatherCard from '../components/WeatherCard';\r\n\r\nconst API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\nconst API_URL = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    state = {\r\n      city: undefined,\r\n      days: new Array(5)\r\n    };\r\n    this.apiRequest = this.apiRequest.bind(this);\r\n  }\r\n\r\n  updateState = data => {\r\n    const city = data.city.name;\r\n    const days = [];\r\n    const dayIndices = this.getDayIndices(data);\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n      days.push({\r\n        date: data.list[dayIndices[i]].dt_txt,\r\n        description: data.list[dayIndices[i]].weather[0].description,\r\n        icon: data.list[dayIndices[i]].weather[0].icon,\r\n        temperature: data.list[dayIndices[i]].main.temp\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      city: city,\r\n      days: days\r\n    });\r\n  };\r\n\r\n  apiRequest = async city => {\r\n    const data = await fetch(`${API_URL}q=${city}&APPID=${API_KEY}`).then(res =>\r\n      res.json()\r\n    );\r\n    if (data.cod === \"200\") {\r\n      await this.updateState(data);\r\n      return true;\r\n    } else return false;\r\n  };\r\n\r\n  getDayIndicies = data => {\r\n    let dayIndices = [];\r\n    dayIndices.push(0);\r\n\r\n    let index = 0;\r\n    let tmp = data.list[index].dt_txt.slice(8, 10);\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      while (\r\n        tmp === data.list[index].dt_txt.slice(8, 10) ||\r\n        data.list[index].dt_txt.slice(11, 13) !== \"15\"\r\n      ) {\r\n        index++;\r\n      }\r\n      dayIndices.push(index);\r\n      tmp = data.list[index].dt_txt.slice(8, 10);\r\n    }\r\n    return dayIndices;\r\n  };\r\n\r\n  render() {\r\n      <div>\r\n        <WeatherCard />\r\n      </div>\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}