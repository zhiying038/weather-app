{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport CurrWeatherInfo from \"../components/CurrWeatherInfo\";\nimport \"../styles/styles.scss\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.apikey = \"7ea099713c6c5bbf7b361f620ca71779\";\n    _this.apiurl = \"http://api.weatheropenmap.org/data/2.5\";\n    _this.state = {\n      activeCity: \"Calgary\",\n      forecast: null\n    };\n    _this.APIRequest = _this.APIRequest.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.APIRequest(this.state.activeCity));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"APIRequest\",\n    value: function APIRequest(cityName) {\n      var _this2 = this;\n\n      var forecastUrl;\n      return _regeneratorRuntime.async(function APIRequest$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              forecastUrl = \"\".concat(this.apiurl, \"/forecast?q=\").concat(cityName, \"&units=metric&appid=\").concat(this.apikey);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(forecastUrl).then(function (res) {\n                _this2.retrieveData(res.data.list);\n              })[\"catch\"](function (error) {\n                console.log(error);\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(currDateTime) {\n      var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      var date = currDateTime.split(\" \")[0].split(\"-\");\n      return \"\".concat(date[2], \" \").concat(months[date[1]]);\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(currDateTime) {\n      return _parseInt(currDateTime.split(\" \")[1].split(\":\")[0]);\n    }\n  }, {\n    key: \"retrieveData\",\n    value: function retrieveData(data) {\n      var date = new Date();\n      var hours = date.getHours();\n      var timeslot = \"\";\n\n      if (hours >= 0 && hours < 3) {\n        timeslot = \"00:00:00\";\n      } else if (hours >= 3 && hours < 6) {\n        timeslot = \"03:00:00\";\n      } else if (hours >= 6 && hours < 9) {\n        timeslot = \"06:00:00\";\n      } else if (hours >= 9 && hours < 12) {\n        timeslot = \"09:00:00\";\n      } else if (hours >= 12 && hours < 15) {\n        timeslot = \"12:00:00\";\n      } else if (hours >= 15 && hours < 18) {\n        timeslot = \"15:00:00\";\n      } else if (hours >= 18 && hours < 21) {\n        timeslot = \"18:00:00\";\n      } else if (hours >= 21) {\n        timeslot = \"21:00:00\";\n      }\n\n      var json = data.filter(function (c) {\n        var time = c.dt_txt.split(\" \")[1];\n\n        if (time === timeslot) {\n          return c;\n        }\n      });\n      this.setState({\n        data: json\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cards = '';\n      var id = 1;\n\n      if (this.state.forecast) {\n        cards = this.state.forecast.map(function (data) {\n          return __jsx(WeatherInfo, {\n            key: id++,\n            time: _this3.formatTime(data.dt_txt),\n            date: _this3.formatDate(data.dt_txt),\n            highTemp: data.main.temp_max,\n            lowTemp: data.main.temp_min,\n            humidity: data.main.humidity,\n            weather: data.weather[0].description,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          });\n        });\n      }\n\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, __jsx(Head, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, __jsx(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Weather Application\")), __jsx(\"h2\", {\n        className: \"has-text=centered is-size-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Weather Forecast\"), __jsx(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, cards)));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","Head","WeatherInfo","CurrentWeather","CurrWeatherInfo","Index","props","apikey","apiurl","state","activeCity","forecast","APIRequest","bind","cityName","forecastUrl","get","then","res","retrieveData","data","list","error","console","log","currDateTime","months","date","split","Date","hours","getHours","timeslot","json","filter","c","time","dt_txt","setState","cards","id","map","formatTime","formatDate","main","temp_max","temp_min","humidity","weather","description","Component"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAO,uBAAP;;IAEqBC,K;;;;;AACnB,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,MAAL,GAAc,kCAAd;AACA,UAAKC,MAAL,GAAc,wCAAd;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,SADD;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAIA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,+BAAlB;AARiB;AASlB;;;;;;;;;;+CAGO,KAAKD,UAAL,CAAgB,KAAKH,KAAL,CAAWC,UAA3B,C;;;;;;;;;;;+BAGSI,Q;;;;;;;;AACTC,cAAAA,W,aAAiB,KAAKP,M,yBAAqBM,Q,iCAA+B,KAAKP,M;;+CAC/EP,KAAK,CACRgB,GADG,CACCD,WADD,EAEHE,IAFG,CAEE,UAAAC,GAAG,EAAI;AACX,gBAAA,MAAI,CAACC,YAAL,CAAkBD,GAAG,CAACE,IAAJ,CAASC,IAA3B;AACD,eAJG,WAKG,UAAAC,KAAK,EAAI;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eAPG,C;;;;;;;;;;;+BAUGG,Y,EAAc;AACvB,UAAMC,MAAM,GAAG,CACb,SADa,EAEb,UAFa,EAGb,OAHa,EAIb,OAJa,EAKb,KALa,EAMb,MANa,EAOb,MAPa,EAQb,QARa,EASb,WATa,EAUb,SAVa,EAWb,UAXa,EAYb,UAZa,CAAf;AAcA,UAAIC,IAAI,GAAGF,YAAY,CAACG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,EAA2BA,KAA3B,CAAiC,GAAjC,CAAX;AACA,uBAAUD,IAAI,CAAC,CAAD,CAAd,cAAqBD,MAAM,CAACC,IAAI,CAAC,CAAD,CAAL,CAA3B;AACD;;;+BAEUF,Y,EAAc;AACvB,aAAO,UAASA,YAAY,CAACG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,EAA2BA,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAT,CAAP;AACD;;;iCAEYR,I,EAAM;AACjB,UAAIO,IAAI,GAAG,IAAIE,IAAJ,EAAX;AACA,UAAIC,KAAK,GAAGH,IAAI,CAACI,QAAL,EAAZ;AACA,UAAIC,QAAQ,GAAG,EAAf;;AACA,UAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA1B,EAA6B;AAC3BE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFD,MAEO,IAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA1B,EAA6B;AAClCE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFM,MAEA,IAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA1B,EAA6B;AAClCE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFM,MAEA,IAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,EAA1B,EAA8B;AACnCE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFM,MAEA,IAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,GAAG,EAA3B,EAA+B;AACpCE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFM,MAEA,IAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,GAAG,EAA3B,EAA+B;AACpCE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFM,MAEA,IAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,GAAG,EAA3B,EAA+B;AACpCE,QAAAA,QAAQ,GAAG,UAAX;AACD,OAFM,MAEA,IAAIF,KAAK,IAAI,EAAb,EAAiB;AACtBE,QAAAA,QAAQ,GAAG,UAAX;AACD;;AACD,UAAIC,IAAI,GAAGb,IAAI,CAACc,MAAL,CAAY,UAAAC,CAAC,EAAI;AAC1B,YAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAAST,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX;;AACA,YAAIQ,IAAI,KAAKJ,QAAb,EAAuB;AACrB,iBAAOG,CAAP;AACD;AACF,OALU,CAAX;AAMA,WAAKG,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEa;AADM,OAAd;AAGD;;;6BAEQ;AAAA;;AACP,UAAIM,KAAK,GAAG,EAAZ;AACA,UAAIC,EAAE,GAAG,CAAT;;AACA,UAAI,KAAK/B,KAAL,CAAWE,QAAf,EAAyB;AACvB4B,QAAAA,KAAK,GAAG,KAAK9B,KAAL,CAAWE,QAAX,CAAoB8B,GAApB,CAAwB,UAAArB,IAAI,EAAI;AACtC,iBACE,MAAC,WAAD;AACE,YAAA,GAAG,EAAEoB,EAAE,EADT;AAEE,YAAA,IAAI,EAAE,MAAI,CAACE,UAAL,CAAgBtB,IAAI,CAACiB,MAArB,CAFR;AAGE,YAAA,IAAI,EAAE,MAAI,CAACM,UAAL,CAAgBvB,IAAI,CAACiB,MAArB,CAHR;AAIE,YAAA,QAAQ,EAAEjB,IAAI,CAACwB,IAAL,CAAUC,QAJtB;AAKE,YAAA,OAAO,EAAEzB,IAAI,CAACwB,IAAL,CAAUE,QALrB;AAME,YAAA,QAAQ,EAAE1B,IAAI,CAACwB,IAAL,CAAUG,QANtB;AAOE,YAAA,OAAO,EAAE3B,IAAI,CAAC4B,OAAL,CAAa,CAAb,EAAgBC,WAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,SAZO,CAAR;AAaD;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,CADF,EAIE;AAAI,QAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJF,EAKE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMV,KAAN,CADF,CALF,CADF;AAWD;;;;EAhHgCxC,KAAK,CAACmD,S;;SAApB7C,K","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport CurrentWeather from \"../components/CurrentWeather\";\r\nimport CurrWeatherInfo from \"../components/CurrWeatherInfo\";\r\nimport \"../styles/styles.scss\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apikey = \"7ea099713c6c5bbf7b361f620ca71779\";\r\n    this.apiurl = \"http://api.weatheropenmap.org/data/2.5\";\r\n    this.state = {\r\n      activeCity: \"Calgary\",\r\n      forecast: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${this.apiurl}/forecast?q=${cityName}&units=metric&appid=${this.apikey}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  formatDate(currDateTime) {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = currDateTime.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${months[date[1]]}`;\r\n  }\r\n\r\n  formatTime(currDateTime) {\r\n    return parseInt(currDateTime.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return c;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: json\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = '';\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(data => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            time={this.formatTime(data.dt_txt)}\r\n            date={this.formatDate(data.dt_txt)}\r\n            highTemp={data.main.temp_max}\r\n            lowTemp={data.main.temp_min}\r\n            humidity={data.main.humidity}\r\n            weather={data.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <h2 className=\"has-text=centered is-size-2\">Weather Forecast</h2>\r\n        <div className=\"card\">\r\n          <div>{cards}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}