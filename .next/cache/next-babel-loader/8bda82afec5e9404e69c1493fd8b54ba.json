{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"../styles/styles.scss\";\nimport WeatherReport from \"../components/WeatherReport\";\nimport SearchCity from \"../components/SearchCity\";\nimport WeatherCard from \"../components/WeatherCard\";\nconst apiUrl = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\nconst apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\nexport default class Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      city: undefined,\n      days: new Array(5)\n    });\n  }\n\n  updateState(data) {\n    const city = data.city.name;\n    const days = [];\n    const dayIndex = this.getDayIndex(data);\n\n    for (let i = 0; i < 6; i++) {\n      days.push({\n        date: data.list[dayIndex[i]].dt_txt,\n        weather: data.list[dayIndex[i]].weather[0].description,\n        icon: data.list[dayIndex[i]].weather[0].icon,\n        temperature: data.list[dayIndex[i]].main.temp\n      });\n    }\n\n    this.setState({\n      city: city,\n      days: days\n    });\n  }\n\n  componentDidMount() {\n    this.apiRequest(this.state.activeCity);\n  }\n\n  async apiRequest(cityName) {\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\n    const data = await fetch(weatherUrl).then(res => res.json());\n\n    if (data.cod === '200') {\n      this.updateState(data);\n      return true;\n    } else return false;\n  }\n\n  getDayIndex(data) {\n    let dayIndex = [];\n    dayIndex.push(0);\n    let index = 0;\n    let time = data.list[index].dt_txt.slice(8, 10);\n\n    for (let i = 0; i < 5; i++) {\n      while (time || data.list[index].dt_txt.slice(11, 13) !== \"15\") {\n        index++;\n      }\n\n      dayIndex.push(index);\n      time = data.list[index].dt_txt.slice(8, 10);\n    }\n\n    return dayIndex;\n  }\n\n  render() {\n    const WeatherCards = () => {\n      const weatherCards = this.state.days.slice(1).map(day => __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(WeatherCard, _extends({}, day, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }))));\n      return __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, weatherCards);\n    };\n\n    return __jsx(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(\"header\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(WeatherReport, {\n      city: this.state.city,\n      data: this.state.days[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(SearchCity, {\n      city: this.state.city,\n      apiRrequest: this.apiRequest.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), __jsx(WeatherCards, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","WeatherReport","SearchCity","WeatherCard","apiUrl","apiKey","Index","Component","city","undefined","days","Array","updateState","data","name","dayIndex","getDayIndex","i","push","date","list","dt_txt","weather","description","icon","temperature","main","temp","setState","componentDidMount","apiRequest","state","activeCity","cityName","weatherUrl","fetch","then","res","json","cod","index","time","slice","render","WeatherCards","weatherCards","map","day","bind"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,MAAMC,MAAM,GAAG,+DAAf;AACA,MAAMC,MAAM,GAAG,kCAAf;AAEA,eAAe,MAAMC,KAAN,SAAoBP,KAAK,CAACQ,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCACzC;AACNC,MAAAA,IAAI,EAAEC,SADA;AAENC,MAAAA,IAAI,EAAE,IAAIC,KAAJ,CAAU,CAAV;AAFA,KADyC;AAAA;;AAMjDC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,UAAML,IAAI,GAAGK,IAAI,CAACL,IAAL,CAAUM,IAAvB;AACA,UAAMJ,IAAI,GAAG,EAAb;AACA,UAAMK,QAAQ,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,CAAjB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BP,MAAAA,IAAI,CAACQ,IAAL,CAAU;AACRC,QAAAA,IAAI,EAAEN,IAAI,CAACO,IAAL,CAAUL,QAAQ,CAACE,CAAD,CAAlB,EAAuBI,MADrB;AAERC,QAAAA,OAAO,EAAET,IAAI,CAACO,IAAL,CAAUL,QAAQ,CAACE,CAAD,CAAlB,EAAuBK,OAAvB,CAA+B,CAA/B,EAAkCC,WAFnC;AAGRC,QAAAA,IAAI,EAAEX,IAAI,CAACO,IAAL,CAAUL,QAAQ,CAACE,CAAD,CAAlB,EAAuBK,OAAvB,CAA+B,CAA/B,EAAkCE,IAHhC;AAIRC,QAAAA,WAAW,EAAEZ,IAAI,CAACO,IAAL,CAAUL,QAAQ,CAACE,CAAD,CAAlB,EAAuBS,IAAvB,CAA4BC;AAJjC,OAAV;AAMD;;AACD,SAAKC,QAAL,CAAc;AACZpB,MAAAA,IAAI,EAAEA,IADM;AAEZE,MAAAA,IAAI,EAAEA;AAFM,KAAd;AAID;;AAEDmB,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,CAAgB,KAAKC,KAAL,CAAWC,UAA3B;AACD;;AAED,QAAMF,UAAN,CAAiBG,QAAjB,EAA2B;AACzB,UAAMC,UAAU,GAAI,GAAE,KAAK9B,MAAO,KAAI6B,QAAS,UAAS,KAAK5B,MAAO,EAApE;AACA,UAAMQ,IAAI,GAAG,MAAMsB,KAAK,CAACD,UAAD,CAAL,CAAkBE,IAAlB,CAAuBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9B,CAAnB;;AACA,QAAIzB,IAAI,CAAC0B,GAAL,KAAa,KAAjB,EAAwB;AACtB,WAAK3B,WAAL,CAAiBC,IAAjB;AACA,aAAO,IAAP;AACD,KAHD,MAGO,OAAO,KAAP;AACR;;AAEDG,EAAAA,WAAW,CAACH,IAAD,EAAO;AAChB,QAAIE,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACG,IAAT,CAAc,CAAd;AACA,QAAIsB,KAAK,GAAG,CAAZ;AACA,QAAIC,IAAI,GAAG5B,IAAI,CAACO,IAAL,CAAUoB,KAAV,EAAiBnB,MAAjB,CAAwBqB,KAAxB,CAA8B,CAA9B,EAAiC,EAAjC,CAAX;;AACA,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,aAAOwB,IAAI,IAAI5B,IAAI,CAACO,IAAL,CAAUoB,KAAV,EAAiBnB,MAAjB,CAAwBqB,KAAxB,CAA8B,EAA9B,EAAkC,EAAlC,MAA0C,IAAzD,EAA+D;AAC7DF,QAAAA,KAAK;AACN;;AACDzB,MAAAA,QAAQ,CAACG,IAAT,CAAcsB,KAAd;AACAC,MAAAA,IAAI,GAAG5B,IAAI,CAACO,IAAL,CAAUoB,KAAV,EAAiBnB,MAAjB,CAAwBqB,KAAxB,CAA8B,CAA9B,EAAiC,EAAjC,CAAP;AACD;;AACD,WAAO3B,QAAP;AACD;;AAED4B,EAAAA,MAAM,GAAG;AACP,UAAMC,YAAY,GAAG,MAAM;AACzB,YAAMC,YAAY,GAAG,KAAKd,KAAL,CAAWrB,IAAX,CAAgBgC,KAAhB,CAAsB,CAAtB,EAAyBI,GAAzB,CAA6BC,GAAG,IACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,WAAD,eAAiBA,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADmB,CAArB;AAKA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,YAAL,CAAP;AACD,KAPD;;AASA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKd,KAAL,CAAWvB,IAAhC;AAAsC,MAAA,IAAI,EAAE,KAAKuB,KAAL,CAAWrB,IAAX,CAAgB,CAAhB,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAE,KAAKqB,KAAL,CAAWvB,IADnB;AAEE,MAAA,WAAW,EAAE,KAAKsB,UAAL,CAAgBkB,IAAhB,CAAqB,IAArB,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF,CADF,CADF;AAaD;;AA3EgD","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../styles/styles.scss\";\r\nimport WeatherReport from \"../components/WeatherReport\";\r\nimport SearchCity from \"../components/SearchCity\";\r\nimport WeatherCard from \"../components/WeatherCard\";\r\n\r\nconst apiUrl = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\r\nconst apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n\r\nexport default class Index extends React.Component {\r\n  state = {\r\n    city: undefined,\r\n    days: new Array(5)\r\n  };\r\n\r\n  updateState(data) {\r\n    const city = data.city.name;\r\n    const days = [];\r\n    const dayIndex = this.getDayIndex(data);\r\n    for (let i = 0; i < 6; i++) {\r\n      days.push({\r\n        date: data.list[dayIndex[i]].dt_txt,\r\n        weather: data.list[dayIndex[i]].weather[0].description,\r\n        icon: data.list[dayIndex[i]].weather[0].icon,\r\n        temperature: data.list[dayIndex[i]].main.temp\r\n      });\r\n    }\r\n    this.setState({\r\n      city: city,\r\n      days: days\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.apiRequest(this.state.activeCity);\r\n  }\r\n\r\n  async apiRequest(cityName) {\r\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\r\n    const data = await fetch(weatherUrl).then(res => res.json());\r\n    if (data.cod === '200') {\r\n      this.updateState(data);\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  getDayIndex(data) {\r\n    let dayIndex = [];\r\n    dayIndex.push(0);\r\n    let index = 0;\r\n    let time = data.list[index].dt_txt.slice(8, 10);\r\n    for (let i = 0; i < 5; i++) {\r\n      while (time || data.list[index].dt_txt.slice(11, 13) !== \"15\") {\r\n        index++;\r\n      }\r\n      dayIndex.push(index);\r\n      time = data.list[index].dt_txt.slice(8, 10);\r\n    }\r\n    return dayIndex;\r\n  }\r\n\r\n  render() {\r\n    const WeatherCards = () => {\r\n      const weatherCards = this.state.days.slice(1).map(day => (\r\n        <li>\r\n          <WeatherCard {...day} />\r\n        </li>\r\n      ));\r\n      return <ul>{weatherCards}</ul>;\r\n    };\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"app\">\r\n          <WeatherReport city={this.state.city} data={this.state.days[0]}>\r\n            <SearchCity\r\n              city={this.state.city}\r\n              apiRrequest={this.apiRequest.bind(this)}\r\n            />\r\n            <WeatherCards />\r\n          </WeatherReport>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}