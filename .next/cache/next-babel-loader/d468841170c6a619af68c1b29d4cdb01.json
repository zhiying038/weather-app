{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport \"../styles/styles.scss\";\nvar APIKEY = \"f5a03edeb6ad5077d594e0da4d610424\";\nvar APIURL = \"http://api.weatheropenmap.org/data/2.5\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      activeCity: \"London\",\n      forecast: null\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.APIRequest(this.state.activeCity));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"APIRequest\",\n    value: function APIRequest(cityName) {\n      var _this2 = this;\n\n      var weatherUrl;\n      return _regeneratorRuntime.async(function APIRequest$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              weatherUrl = \"\".concat(APIURL, \"/forecast?q=\").concat(cityName, \"&units=metric&appid=\").concat(APIKEY);\n              axios.get(weatherUrl).then(function (res) {\n                var details = res.data;\n\n                _this2.retrieveData(details.list);\n              })[\"catch\"](function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(currDateTime) {\n      var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      var date = currDateTime.split(\" \")[0].split(\"-\");\n      return \"\".concat(date[2], \" \").concat(months[date[1]]);\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(currDateTime) {\n      return _parseInt(currDateTime.split(\" \")[1].split(\":\")[0]);\n    }\n  }, {\n    key: \"retrieveData\",\n    value: function retrieveData(data) {\n      var date = new Date();\n      var hours = date.getHours();\n      var timeslot = \"\";\n\n      if (hours >= 0 && hours < 3) {\n        timeslot = \"00:00:00\";\n      } else if (hours >= 3 && hours < 6) {\n        timeslot = \"03:00:00\";\n      } else if (hours >= 6 && hours < 9) {\n        timeslot = \"06:00:00\";\n      } else if (hours >= 9 && hours < 12) {\n        timeslot = \"09:00:00\";\n      } else if (hours >= 12 && hours < 15) {\n        timeslot = \"12:00:00\";\n      } else if (hours >= 15 && hours < 18) {\n        timeslot = \"15:00:00\";\n      } else if (hours >= 18 && hours < 21) {\n        timeslot = \"18:00:00\";\n      } else if (hours >= 21) {\n        timeslot = \"21:00:00\";\n      }\n\n      var jsonData = data.filter(function (detail) {\n        var time = detail.dt_txt.split(\" \")[1];\n\n        if (time === timeslot) {\n          return detail;\n        }\n      });\n      this.setState({\n        data: jsonData\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cards = \"\";\n      var id = 1;\n\n      if (this.state.forecast) {\n        cards = this.state.forecast.map(function (data) {\n          return __jsx(WeatherInfo, {\n            key: id++,\n            time: _this3.formatTime(data.dt_txt),\n            date: _this3.formatDate(data.dt_txt),\n            highTemp: data.main.temp_max,\n            lowTemp: data.main.temp_min,\n            humidity: data.main.humidity,\n            weather: data.weather[0].description,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          });\n        });\n      }\n\n      return __jsx(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"module-card-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"module-card card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, cards)))));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","WeatherInfo","APIKEY","APIURL","Index","props","state","activeCity","forecast","APIRequest","cityName","weatherUrl","get","then","res","details","data","retrieveData","list","error","console","log","currDateTime","months","date","split","Date","hours","getHours","timeslot","jsonData","filter","detail","time","dt_txt","setState","cards","id","map","formatTime","formatDate","main","temp_max","temp_min","humidity","weather","description","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport \"../styles/styles.scss\";\r\n\r\nconst APIKEY = \"f5a03edeb6ad5077d594e0da4d610424\";\r\nconst APIURL = \"http://api.weatheropenmap.org/data/2.5\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeCity: \"London\",\r\n      forecast: null\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const weatherUrl = `${APIURL}/forecast?q=${cityName}&units=metric&appid=${APIKEY}`;\r\n    axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        const details = res.data;\r\n        this.retrieveData(details.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  formatDate(currDateTime) {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = currDateTime.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${months[date[1]]}`;\r\n  }\r\n\r\n  formatTime(currDateTime) {\r\n    return parseInt(currDateTime.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let jsonData = data.filter(detail => {\r\n      let time = detail.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return detail;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: jsonData\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(data => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            time={this.formatTime(data.dt_txt)}\r\n            date={this.formatDate(data.dt_txt)}\r\n            highTemp={data.main.temp_max}\r\n            lowTemp={data.main.temp_min}\r\n            humidity={data.main.humidity}\r\n            weather={data.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n        <div className=\"columns\">\r\n            <div className=\"column\">\r\n                <div className=\"module-card-wrap\">\r\n                    <div className=\"module-card card\">\r\n                        <div className=\"card\">\r\n                            {cards}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}