{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"../styles/styles.scss\";\nimport WeatherReport from \"../components/WeatherReport\";\nimport SearchCity from \"../components/SearchCity\";\nimport WeatherCard from \"../components/WeatherCard\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.apiUrl = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    this.state = {\n      city: \"Kuala Lumpur\",\n      days: new Array(5)\n    };\n  }\n\n  updateState(data) {\n    const city = data.city.name;\n    const days = [];\n    const dayIndex = this.getDayIndex(data);\n\n    for (let i = 0; i < 6; i++) {\n      days.push({\n        date: data.list[dayIndex[i]].dt_txt,\n        weather: data.list[dayIndex[i]].weather[0].description,\n        icon: data.list[dayIndex[i]].weather[0].icon,\n        temperature: data.list[dayIndex[i]].main.temp\n      });\n    }\n\n    this.setState({\n      city: city,\n      days: days\n    });\n  }\n\n  async componentDidMount() {\n    await this.apiRequest(this.state.activeCity);\n  }\n\n  async apiRequest(cityName) {\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\n    await axios.get(weatherUrl).then(res => {\n      this.getData(res.json());\n    }).catch(err => console.log(err));\n  }\n\n  getDayIndex(data) {\n    let dayIndex = [];\n    dayIndex.push(0);\n    let index = 0;\n    let time = data.list[index].dt_txt.slice(8, 10);\n\n    for (let i = 0; i < 5; i++) {\n      while (time || data.list[index].dt_txt.slice(11, 13) !== '15') {\n        index++;\n      }\n\n      dayIndex.push(index);\n      time = data.list[index].dt_txt.slice(8, 10);\n    }\n\n    return dayIndex;\n  }\n\n  render() {\n    const weatherCards = () => {\n      const weatherCards = this.state.days.slice(1).map(day => __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, __jsx(WeatherCard, _extends({}, day, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }))));\n      return __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, weatherCards);\n    };\n\n    return __jsx(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, __jsx(WeatherReport, {\n      city: this.state.city,\n      data: this.state.days[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, __jsx(SearchCity, {\n      city: this.state.city,\n      apiRrequest: this.apiRequest.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), __jsx(\"weatherCards\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","WeatherReport","SearchCity","WeatherCard","Index","Component","constructor","props","apiUrl","apiKey","state","city","days","Array","updateState","data","name","dayIndex","getDayIndex","i","push","date","list","dt_txt","weather","description","icon","temperature","main","temp","setState","componentDidMount","apiRequest","activeCity","cityName","weatherUrl","get","then","res","getData","json","catch","err","console","log","index","time","slice","render","weatherCards","map","day","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../styles/styles.scss\";\r\nimport WeatherReport from \"../components/WeatherReport\";\r\nimport SearchCity from \"../components/SearchCity\";\r\nimport WeatherCard from \"../components/WeatherCard\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apiUrl =\r\n      \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\r\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.state = {\r\n      city: \"Kuala Lumpur\",\r\n      days: new Array(5)\r\n    };\r\n  }\r\n\r\n  updateState(data) {\r\n    const city = data.city.name;\r\n    const days = [];\r\n    const dayIndex = this.getDayIndex(data);\r\n    for (let i=0; i<6; i++) {\r\n      days.push({\r\n        date: data.list[dayIndex[i]].dt_txt,\r\n        weather: data.list[dayIndex[i]].weather[0].description,\r\n        icon: data.list[dayIndex[i]].weather[0].icon,\r\n        temperature: data.list[dayIndex[i]].main.temp\r\n      });\r\n    }\r\n    this.setState({\r\n      city: city,\r\n      days: days\r\n    })\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.apiRequest(this.state.activeCity);\r\n  }\r\n\r\n  async apiRequest(cityName) {\r\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\r\n    await axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        this.getData(res.json());\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  getDayIndex(data) {\r\n    let dayIndex = [];\r\n    dayIndex.push(0);\r\n    let index = 0;\r\n    let time = data.list[index].dt_txt.slice(8,10);\r\n    for (let i=0; i<5; i++) {\r\n      while (time || data.list[index].dt_txt.slice(11,13) !== '15') {\r\n        index++;\r\n      }\r\n      dayIndex.push(index);\r\n      time = data.list[index].dt_txt.slice(8,10);\r\n    }\r\n    return dayIndex;\r\n  }\r\n\r\n  render() {\r\n    const weatherCards = () => {\r\n      const weatherCards = this.state.days.slice(1).map(day => (\r\n        <li>\r\n          <WeatherCard {...day} />\r\n        </li>\r\n      ));\r\n      return <ul>{weatherCards}</ul>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <WeatherReport city={this.state.city} data={this.state.days[0]}>\r\n          <SearchCity city={this.state.city} apiRrequest={this.apiRequest.bind(this)} />\r\n          <weatherCards />\r\n        </WeatherReport>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}