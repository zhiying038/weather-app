{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather-app\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport { Row } from \"react-grid-system\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport SearchCity from \"../components/SearchCity\";\nimport \"../styles/styles.scss\";\nconst WEATHER_API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\nconst WEATHER_API_URL = \"http://api.openweathermap.org/data/2.5\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeCity: \"Kuala Lumpur\",\n      unit: \"metric\",\n      data: null\n    };\n    this.APIRequest = this.APIRequest.bind(this);\n    this.retrieveData = this.retrieveData.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n  } // Mount original city\n\n\n  async componentDidMount() {\n    await this.APIRequest(this.state.activeCity);\n  } // OpenWeatherMap API request\n\n\n  async APIRequest(cityName) {\n    const forecastUrl = `${WEATHER_API_URL}/forecast?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\n    await axios.get(forecastUrl).then(res => {\n      this.retrieveData(res.data.list);\n    }).catch(error => {\n      console.log(error);\n    });\n    const weatherUrl = `${WEATHER_API_URL}/weather?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\n    axios.get(weatherUrl).then(res => {\n      const detail = res.data;\n      this.setState({\n        city: detail.name,\n        temperature: detail.main.temp,\n        description: detail.weather[0].description,\n        feels_like: detail.main.feels_like,\n        humidity: detail.main.humidity,\n        highTemp: detail.main.temp_max,\n        lowTemp: detail.main.temp_min,\n        country: detail.sys.country,\n        windspeed: `${detail.wind.speed} ${this.state.unit === \"metric\" ? \"m/s\" : \"mph\"}`\n      });\n    });\n  }\n  /* Display date in the format of DD/MM/YY */\n\n\n  formatDate(dateData) {\n    let date = dateData.split(\" \")[0].split(\"-\");\n    return `${date[2]}/${date[1]}/${date[0]}`;\n  }\n  /* Display forecast for 5 days according to the local system time */\n\n\n  retrieveData(data) {\n    let date = new Date();\n    let hours = date.getHours();\n    let timeslot = \"\";\n\n    if (hours >= 0 && hours < 3) {\n      timeslot = \"00:00:00\";\n    } else if (hours >= 3 && hours < 6) {\n      timeslot = \"03:00:00\";\n    } else if (hours >= 6 && hours < 9) {\n      timeslot = \"06:00:00\";\n    } else if (hours >= 9 && hours < 12) {\n      timeslot = \"09:00:00\";\n    } else if (hours >= 12 && hours < 15) {\n      timeslot = \"12:00:00\";\n    } else if (hours >= 15 && hours < 18) {\n      timeslot = \"15:00:00\";\n    } else if (hours >= 18 && hours < 21) {\n      timeslot = \"18:00:00\";\n    } else if (hours >= 21) {\n      timeslot = \"21:00:00\";\n    }\n\n    let jsonData = data.filter(data => {\n      let time = data.dt_txt.split(\" \")[1];\n\n      if (time === timeslot) {\n        return data;\n      }\n    });\n    this.setState({\n      data: jsonData\n    });\n  }\n\n  submitHandler(input) {\n    input.preventDefault();\n    this.APIRequest(this.state.activeCity);\n  }\n\n  changeHandler(input) {\n    input.preventDefault();\n    this.setState({\n      activeCity: input.target.value\n    });\n  }\n\n  render() {\n    let cards = \"\";\n\n    if (this.state.data) {\n      cards = this.state.data.map(data => {\n        return __jsx(WeatherInfo, {\n          date: this.formatDate(data.dt_txt),\n          maxTemp: data.main.temp_max,\n          minTemp: data.main.temp_min,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Weather Application\")), __jsx(SearchCity, {\n      changeHandler: this.changeHandler,\n      submitHandler: this.submitHandler,\n      activeCity: this.state.activeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), __jsx(CurrentWeather, {\n      city: this.state.city,\n      temperature: this.state.temperature,\n      description: this.state.description,\n      feels_like: this.state.feels_like,\n      highTemp: this.state.highTemp,\n      lowTemp: this.state.lowTemp,\n      humidity: this.state.humidity,\n      country: this.state.country,\n      windspeed: this.state.windspeed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"column tile is-ancestor is-centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"tile is-child\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, cards))))))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather-app/pages/index.js"],"names":["React","axios","Head","Row","WeatherInfo","CurrentWeather","SearchCity","WEATHER_API_KEY","WEATHER_API_URL","Index","Component","constructor","props","state","activeCity","unit","data","APIRequest","bind","retrieveData","submitHandler","changeHandler","componentDidMount","cityName","forecastUrl","get","then","res","list","catch","error","console","log","weatherUrl","detail","setState","city","name","temperature","main","temp","description","weather","feels_like","humidity","highTemp","temp_max","lowTemp","temp_min","country","sys","windspeed","wind","speed","formatDate","dateData","date","split","Date","hours","getHours","timeslot","jsonData","filter","time","dt_txt","input","preventDefault","target","value","render","cards","map","icon"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,GAAT,QAAoB,mBAApB;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,uBAAP;AAEA,MAAMC,eAAe,GAAG,kCAAxB;AACA,MAAMC,eAAe,GAAG,wCAAxB;AAEA,eAAe,MAAMC,KAAN,SAAoBT,KAAK,CAACU,SAA1B,CAAoC;AACjDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,cADD;AAEXC,MAAAA,IAAI,EAAE,QAFK;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKG,aAAL,GAAqB,KAAKA,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB,CAArB;AACD,GAZgD,CAcjD;;;AACA,QAAMI,iBAAN,GAA0B;AACxB,UAAM,KAAKL,UAAL,CAAgB,KAAKJ,KAAL,CAAWC,UAA3B,CAAN;AACD,GAjBgD,CAmBjD;;;AACA,QAAMG,UAAN,CAAiBM,QAAjB,EAA2B;AACzB,UAAMC,WAAW,GAAI,GAAEhB,eAAgB,eAAce,QAAS,UAAS,KAAKV,KAAL,CAAWE,IAAK,UAASR,eAAgB,EAAhH;AACA,UAAMN,KAAK,CACRwB,GADG,CACCD,WADD,EAEHE,IAFG,CAEEC,GAAG,IAAI;AACX,WAAKR,YAAL,CAAkBQ,GAAG,CAACX,IAAJ,CAASY,IAA3B;AACD,KAJG,EAKHC,KALG,CAKGC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAPG,CAAN;AASA,UAAMG,UAAU,GAAI,GAAEzB,eAAgB,cAAae,QAAS,UAAS,KAAKV,KAAL,CAAWE,IAAK,UAASR,eAAgB,EAA9G;AACAN,IAAAA,KAAK,CAACwB,GAAN,CAAUQ,UAAV,EAAsBP,IAAtB,CAA2BC,GAAG,IAAI;AAChC,YAAMO,MAAM,GAAGP,GAAG,CAACX,IAAnB;AACA,WAAKmB,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAEF,MAAM,CAACG,IADD;AAEZC,QAAAA,WAAW,EAAEJ,MAAM,CAACK,IAAP,CAAYC,IAFb;AAGZC,QAAAA,WAAW,EAAEP,MAAM,CAACQ,OAAP,CAAe,CAAf,EAAkBD,WAHnB;AAIZE,QAAAA,UAAU,EAAET,MAAM,CAACK,IAAP,CAAYI,UAJZ;AAKZC,QAAAA,QAAQ,EAAEV,MAAM,CAACK,IAAP,CAAYK,QALV;AAMZC,QAAAA,QAAQ,EAAEX,MAAM,CAACK,IAAP,CAAYO,QANV;AAOZC,QAAAA,OAAO,EAAEb,MAAM,CAACK,IAAP,CAAYS,QAPT;AAQZC,QAAAA,OAAO,EAAEf,MAAM,CAACgB,GAAP,CAAWD,OARR;AASZE,QAAAA,SAAS,EAAG,GAAEjB,MAAM,CAACkB,IAAP,CAAYC,KAAM,IAAG,KAAKxC,KAAL,CAAWE,IAAX,KAAoB,QAApB,GAA+B,KAA/B,GAAuC,KAAM;AATpE,OAAd;AAWD,KAbD;AAcD;AAED;;;AACAuC,EAAAA,UAAU,CAACC,QAAD,EAAW;AACnB,QAAIC,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuBA,KAAvB,CAA6B,GAA7B,CAAX;AACA,WAAQ,GAAED,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,EAAxC;AACD;AAED;;;AACArC,EAAAA,YAAY,CAACH,IAAD,EAAO;AACjB,QAAIwC,IAAI,GAAG,IAAIE,IAAJ,EAAX;AACA,QAAIC,KAAK,GAAGH,IAAI,CAACI,QAAL,EAAZ;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA1B,EAA6B;AAC3BE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFD,MAEO,IAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA1B,EAA6B;AAClCE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFM,MAEA,IAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA1B,EAA6B;AAClCE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFM,MAEA,IAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,EAA1B,EAA8B;AACnCE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFM,MAEA,IAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,GAAG,EAA3B,EAA+B;AACpCE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFM,MAEA,IAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,GAAG,EAA3B,EAA+B;AACpCE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFM,MAEA,IAAIF,KAAK,IAAI,EAAT,IAAeA,KAAK,GAAG,EAA3B,EAA+B;AACpCE,MAAAA,QAAQ,GAAG,UAAX;AACD,KAFM,MAEA,IAAIF,KAAK,IAAI,EAAb,EAAiB;AACtBE,MAAAA,QAAQ,GAAG,UAAX;AACD;;AACD,QAAIC,QAAQ,GAAG9C,IAAI,CAAC+C,MAAL,CAAY/C,IAAI,IAAI;AACjC,UAAIgD,IAAI,GAAGhD,IAAI,CAACiD,MAAL,CAAYR,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAX;;AACA,UAAIO,IAAI,KAAKH,QAAb,EAAuB;AACrB,eAAO7C,IAAP;AACD;AACF,KALc,CAAf;AAMA,SAAKmB,QAAL,CAAc;AACZnB,MAAAA,IAAI,EAAE8C;AADM,KAAd;AAGD;;AAED1C,EAAAA,aAAa,CAAC8C,KAAD,EAAQ;AACnBA,IAAAA,KAAK,CAACC,cAAN;AACA,SAAKlD,UAAL,CAAgB,KAAKJ,KAAL,CAAWC,UAA3B;AACD;;AAEDO,EAAAA,aAAa,CAAC6C,KAAD,EAAQ;AACnBA,IAAAA,KAAK,CAACC,cAAN;AACA,SAAKhC,QAAL,CAAc;AACZrB,MAAAA,UAAU,EAAEoD,KAAK,CAACE,MAAN,CAAaC;AADb,KAAd;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAI,KAAK1D,KAAL,CAAWG,IAAf,EAAqB;AACnBuD,MAAAA,KAAK,GAAG,KAAK1D,KAAL,CAAWG,IAAX,CAAgBwD,GAAhB,CAAoBxD,IAAI,IAAI;AAClC,eACE,MAAC,WAAD;AACE,UAAA,IAAI,EAAE,KAAKsC,UAAL,CAAgBtC,IAAI,CAACiD,MAArB,CADR;AAEE,UAAA,OAAO,EAAEjD,IAAI,CAACuB,IAAL,CAAUO,QAFrB;AAGE,UAAA,OAAO,EAAE9B,IAAI,CAACuB,IAAL,CAAUS,QAHrB;AAIE,UAAA,QAAQ,EAAEhC,IAAI,CAACuB,IAAL,CAAUK,QAJtB;AAKE,UAAA,WAAW,EAAE5B,IAAI,CAAC0B,OAAL,CAAa,CAAb,EAAgBD,WAL/B;AAME,UAAA,IAAI,EAAEzB,IAAI,CAAC0B,OAAL,CAAa,CAAb,EAAgB+B,IANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,OAXO,CAAR;AAYD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF,EAIE,MAAC,UAAD;AACE,MAAA,aAAa,EAAE,KAAKpD,aADtB;AAEE,MAAA,aAAa,EAAE,KAAKD,aAFtB;AAGE,MAAA,UAAU,EAAE,KAAKP,KAAL,CAAWC,UAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EASE,MAAC,cAAD;AACE,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWuB,IADnB;AAEE,MAAA,WAAW,EAAE,KAAKvB,KAAL,CAAWyB,WAF1B;AAGE,MAAA,WAAW,EAAE,KAAKzB,KAAL,CAAW4B,WAH1B;AAIE,MAAA,UAAU,EAAE,KAAK5B,KAAL,CAAW8B,UAJzB;AAKE,MAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWgC,QALvB;AAME,MAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWkC,OANtB;AAOE,MAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAW+B,QAPvB;AAQE,MAAA,OAAO,EAAE,KAAK/B,KAAL,CAAWoC,OARtB;AASE,MAAA,SAAS,EAAE,KAAKpC,KAAL,CAAWsC,SATxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EAqBE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMoB,KAAN,CADF,CADF,CADF,CADF,CADF,CADF,CArBF,CADF;AAqCD;;AAxJgD","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport { Row } from \"react-grid-system\";\r\n\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport CurrentWeather from \"../components/CurrentWeather\";\r\nimport SearchCity from \"../components/SearchCity\";\r\nimport \"../styles/styles.scss\";\r\n\r\nconst WEATHER_API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\nconst WEATHER_API_URL = \"http://api.openweathermap.org/data/2.5\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      unit: \"metric\",\r\n      data: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n    this.retrieveData = this.retrieveData.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n\r\n  // Mount original city\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  // OpenWeatherMap API request\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${WEATHER_API_URL}/forecast?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    const weatherUrl = `${WEATHER_API_URL}/weather?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\r\n    axios.get(weatherUrl).then(res => {\r\n      const detail = res.data;\r\n      this.setState({\r\n        city: detail.name,\r\n        temperature: detail.main.temp,\r\n        description: detail.weather[0].description,\r\n        feels_like: detail.main.feels_like,\r\n        humidity: detail.main.humidity,\r\n        highTemp: detail.main.temp_max,\r\n        lowTemp: detail.main.temp_min,\r\n        country: detail.sys.country,\r\n        windspeed: `${detail.wind.speed} ${this.state.unit === \"metric\" ? \"m/s\" : \"mph\"}`\r\n      });\r\n    });\r\n  }\r\n\r\n  /* Display date in the format of DD/MM/YY */\r\n  formatDate(dateData) {\r\n    let date = dateData.split(\" \")[0].split(\"-\");\r\n    return `${date[2]}/${date[1]}/${date[0]}`;\r\n  }\r\n\r\n  /* Display forecast for 5 days according to the local system time */\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let jsonData = data.filter(data => {\r\n      let time = data.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return data;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: jsonData\r\n    });\r\n  }\r\n\r\n  submitHandler(input) {\r\n    input.preventDefault();\r\n    this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  changeHandler(input) {\r\n    input.preventDefault();\r\n    this.setState({\r\n      activeCity: input.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    if (this.state.data) {\r\n      cards = this.state.data.map(data => {\r\n        return (\r\n          <WeatherInfo\r\n            date={this.formatDate(data.dt_txt)}\r\n            maxTemp={data.main.temp_max}\r\n            minTemp={data.main.temp_min}\r\n            humidity={data.main.humidity}\r\n            description={data.weather[0].description}\r\n            icon={data.weather[0].icon}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <SearchCity\r\n          changeHandler={this.changeHandler}\r\n          submitHandler={this.submitHandler}\r\n          activeCity={this.state.activeCity}\r\n        />\r\n        <CurrentWeather\r\n          city={this.state.city}\r\n          temperature={this.state.temperature}\r\n          description={this.state.description}\r\n          feels_like={this.state.feels_like}\r\n          highTemp={this.state.highTemp}\r\n          lowTemp={this.state.lowTemp}\r\n          humidity={this.state.humidity}\r\n          country={this.state.country}\r\n          windspeed={this.state.windspeed}\r\n        />\r\n        <br />\r\n        <div className=\"section\">\r\n          <div className=\"container\">\r\n            <div className=\"columns\">\r\n              <div className=\"column tile is-ancestor is-centered\">\r\n                <div className=\"tile\">\r\n                  <div className=\"tile is-child\">\r\n                    <Row>{cards}</Row>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}