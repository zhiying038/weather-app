{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"../styles/styles.scss\";\nconst APIKEY = \"e5de4c9c22a27bf70ac8548ced29fc0c\";\nconst APIURL = \"http://api.weatheropenmap.org/data/2.5\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeCity: \"London\",\n      forecast: null\n    };\n  }\n\n  async componentDidMount() {\n    await this.APIRequest(this.state.activeCity);\n  }\n\n  async APIRequest(cityName) {\n    const weatherUrl = `${APIURL}/forecast?q=${cityName}&units=metric&APPID=${APIKEY}`;\n    axios.get(weatherUrl).then(res => {\n      const details = res.data;\n      this.retrieveData(details.list);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  formatDate(currDateTime) {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = currDateTime.split(\" \")[0].split(\"-\");\n    return `${date[2]} ${months[date[1]]}`;\n  }\n\n  formatTime(currDateTime) {\n    return parseInt(currDateTime.split(\" \")[1].split(\":\")[0]);\n  }\n\n  retrieveData(data) {\n    let date = new Date();\n    let hours = date.getHours();\n    let timeslot = \"\";\n\n    if (hours >= 0 && hours < 3) {\n      timeslot = \"00:00:00\";\n    } else if (hours >= 3 && hours < 6) {\n      timeslot = \"03:00:00\";\n    } else if (hours >= 6 && hours < 9) {\n      timeslot = \"06:00:00\";\n    } else if (hours >= 9 && hours < 12) {\n      timeslot = \"09:00:00\";\n    } else if (hours >= 12 && hours < 15) {\n      timeslot = \"12:00:00\";\n    } else if (hours >= 15 && hours < 18) {\n      timeslot = \"15:00:00\";\n    } else if (hours >= 18 && hours < 21) {\n      timeslot = \"18:00:00\";\n    } else if (hours >= 21) {\n      timeslot = \"21:00:00\";\n    }\n\n    let jsonData = data.filter(detail => {\n      let time = detail.dt_txt.split(\" \")[1];\n\n      if (time === timeslot) {\n        return detail;\n      }\n    });\n    this.setState({\n      data: jsonData\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n\n    if (this.state.forecast) {\n      cards = this.state.forecast.map(data => {\n        return __jsx(WeatherInfo, {\n          key: id++,\n          time: this.formatTime(data.dt_txt),\n          date: this.formatDate(data.dt_txt),\n          highTemp: data.main.temp_max,\n          lowTemp: data.main.temp_min,\n          humidity: data.main.humidity,\n          weather: data.weather[0].description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(\"div\", {\n      className: \"columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"module-card-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"module-card card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, cards)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","APIKEY","APIURL","Index","Component","constructor","props","state","activeCity","forecast","componentDidMount","APIRequest","cityName","weatherUrl","get","then","res","details","data","retrieveData","list","catch","error","console","log","formatDate","currDateTime","months","date","split","formatTime","parseInt","Date","hours","getHours","timeslot","jsonData","filter","detail","time","dt_txt","setState","render","cards","id","map","main","temp_max","temp_min","humidity","weather","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"../styles/styles.scss\";\r\n\r\nconst APIKEY = \"e5de4c9c22a27bf70ac8548ced29fc0c\";\r\nconst APIURL = \"http://api.weatheropenmap.org/data/2.5\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeCity: \"London\",\r\n      forecast: null\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  async APIRequest(cityName) {\r\n    const weatherUrl = `${APIURL}/forecast?q=${cityName}&units=metric&APPID=${APIKEY}`;\r\n    axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        const details = res.data;\r\n        this.retrieveData(details.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  formatDate(currDateTime) {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = currDateTime.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${months[date[1]]}`;\r\n  }\r\n\r\n  formatTime(currDateTime) {\r\n    return parseInt(currDateTime.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  retrieveData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeslot = \"\";\r\n    if (hours >= 0 && hours < 3) {\r\n      timeslot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n      timeslot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n      timeslot = \"06:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n      timeslot = \"09:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n      timeslot = \"12:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n      timeslot = \"15:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n      timeslot = \"18:00:00\";\r\n    } else if (hours >= 21) {\r\n      timeslot = \"21:00:00\";\r\n    }\r\n    let jsonData = data.filter(detail => {\r\n      let time = detail.dt_txt.split(\" \")[1];\r\n      if (time === timeslot) {\r\n        return detail;\r\n      }\r\n    });\r\n    this.setState({\r\n      data: jsonData\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(data => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            time={this.formatTime(data.dt_txt)}\r\n            date={this.formatDate(data.dt_txt)}\r\n            highTemp={data.main.temp_max}\r\n            lowTemp={data.main.temp_min}\r\n            humidity={data.main.humidity}\r\n            weather={data.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n        <div className=\"columns\">\r\n            <div className=\"column\">\r\n                <div className=\"module-card-wrap\">\r\n                    <div className=\"module-card card\">\r\n                        <div className=\"card\">\r\n                            {cards}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}