{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport WeatherReport from \"../components/WeatherReport\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.apiUrl = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\n    _this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    _this.state = {\n      activeCity: \"Kuala Lumpur\",\n      forecast: null\n    };\n    _this.apiRequest = _this.apiRequest.bind(_assertThisInitialized(_this));\n    _this.formatDate = _this.formatDate.bind(_assertThisInitialized(_this));\n    _this.formatHour = _this.formatHour.bind(_assertThisInitialized(_this));\n    _this.getData = _this.getData.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.apiRequest(this.state.activeCity));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"apiRequest\",\n    value: function apiRequest(cityName) {\n      var _this2 = this;\n\n      var weatherUrl;\n      return _regeneratorRuntime.async(function apiRequest$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              weatherUrl = \"\".concat(this.apiUrl, \"q=\").concat(cityName, \"&appid=\").concat(this.apiKey);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(weatherUrl).then(function (res) {\n                _this2.getData(res.data);\n              })[\"catch\"](function (err) {\n                return console.log(err);\n              }));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(dateTxt) {\n      var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      var date = dateTxt.split(\" \")[0].split(\"-\");\n      return \"\".concat(date[2], \" \").concat(month[date[1]]);\n    }\n  }, {\n    key: \"formatHour\",\n    value: function formatHour(dateTxt) {\n      return _parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(data) {\n      var date = new Date();\n      var hours = date.getHours();\n      var timeSlot = \"\";\n\n      if (hours >= 0 && hours < 3) {\n        timeSlot = \"00:00:00\";\n      } else if (hours >= 3 && hours < 6) {\n        timeSlot = \"03:00:00\";\n      } else if (hours >= 6 && hours < 9) {\n        timeSlot = \"09:00:00\";\n      } else if (hours >= 9 && hours < 12) {\n        timeSlot = \"12:00:00\";\n      } else if (hours >= 12 && hours < 15) {\n        timeSlot = \"15:00:00\";\n      } else if (hours >= 15 && hours < 18) {\n        timeSlot = \"18:00:00\";\n      } else if (hours >= 18 && hours < 21) {\n        timeSlot = \"21:00:00\";\n      }\n\n      var json = data.filter(function (c) {\n        var time = c.dt_txt.split(\" \")[1];\n        if (time === timeSlot) return c;\n      });\n      this.setState({\n        forecast: json\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cards = \"\";\n      var id = 1;\n\n      if (this.state.forecast) {\n        cards = this.state.forecast.map(function (details) {\n          return __jsx(WeatherReport, {\n            key: id++,\n            time: _this3.formatHour(details.list.dt_txt),\n            date: _this3.formatDate(details.list.dt_txt),\n            maxTemp: details.list.main.temp_max,\n            minTemp: details.list.main.temp_min,\n            humidity: details.list.main.humidity,\n            description: details.list.weather[0].description,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          });\n        });\n      }\n\n      return __jsx(\"div\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, __jsx(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.activeCity)))\n      /* <Row>\r\n          <Col lg={12}>\r\n              <Row>\r\n                  \r\n              </Row>\r\n          </Col>\r\n      </Row>\r\n      <Row>\r\n          {cards}\r\n      </Row>\r\n      </Container> */\n      ;\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","WeatherReport","Index","props","apiUrl","apiKey","state","activeCity","forecast","apiRequest","bind","formatDate","formatHour","getData","cityName","weatherUrl","get","then","res","data","err","console","log","dateTxt","month","date","split","Date","hours","getHours","timeSlot","json","filter","c","time","dt_txt","setState","cards","id","map","details","list","main","temp_max","temp_min","humidity","weather","description","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport WeatherReport from \"../components/WeatherReport\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apiUrl =\r\n      \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\r\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      forecast: null\r\n    };\r\n    this.apiRequest = this.apiRequest.bind(this);\r\n    this.formatDate = this.formatDate.bind(this);\r\n    this.formatHour = this.formatHour.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.apiRequest(this.state.activeCity);\r\n  }\r\n\r\n  async apiRequest(cityName) {\r\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\r\n    await axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        this.getData(res.data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  formatDate(dateTxt) {\r\n    const month = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = dateTxt.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${month[date[1]]}`;\r\n  }\r\n\r\n  formatHour(dateTxt) {\r\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  getData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeSlot = \"\";\r\n\r\n    if (hours >= 0 && hours < 3) {\r\n        timeSlot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n        timeSlot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n        timeSlot = \"09:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n        timeSlot = \"12:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n        timeSlot = \"15:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n        timeSlot = \"18:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n        timeSlot = \"21:00:00\";\r\n    }\r\n\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeSlot) return c;\r\n    });\r\n    this.setState({\r\n      forecast: json\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(details => {\r\n        return (\r\n          <WeatherReport\r\n            key={id++}\r\n            time={this.formatHour(details.list.dt_txt)}\r\n            date={this.formatDate(details.list.dt_txt)}\r\n            maxTemp={details.list.main.temp_max}\r\n            minTemp={details.list.main.temp_min}\r\n            humidity={details.list.main.humidity}\r\n            description={details.list.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"section\">\r\n        <div className=\"container\">\r\n          <h4>{this.state.activeCity}</h4>\r\n        </div>\r\n      </div>\r\n            /* <Row>\r\n                <Col lg={12}>\r\n                    <Row>\r\n                        \r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {cards}\r\n            </Row>\r\n        </Container> */\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}