{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport WeatherReport from \"../components/WeatherReport\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.apiUrl = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    this.state = {\n      activeCity: \"Kuala Lumpur\",\n      forecast: null\n    };\n    this.apiRequest = this.apiRequest.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.formatHour = this.formatHour.bind(this);\n    this.getData = this.getData.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.apiRequest(this.state.activeCity);\n  }\n\n  async apiRequest(cityName) {\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\n    await axios.get(weatherUrl).then(res => {\n      this.getData(res.data);\n    }).catch(err => console.log(err));\n  }\n\n  formatDate(dateTxt) {\n    const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = dateTxt.split(\" \")[0].split(\"-\");\n    return `${date[2]} ${month[date[1]]}`;\n  }\n\n  formatHour(dateTxt) {\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\n  }\n\n  getData(data) {\n    let date = new Date();\n    let hours = date.getHours();\n    let timeSlot = \"\";\n\n    if (hours >= 0 && hours < 3) {\n      timeSlot = \"00:00:00\";\n    } else if (hours >= 3 && hours < 6) {\n      timeSlot = \"03:00:00\";\n    } else if (hours >= 6 && hours < 9) {\n      timeSlot = \"09:00:00\";\n    } else if (hours >= 9 && hours < 12) {\n      timeSlot = \"12:00:00\";\n    } else if (hours >= 12 && hours < 15) {\n      timeSlot = \"15:00:00\";\n    } else if (hours >= 15 && hours < 18) {\n      timeSlot = \"18:00:00\";\n    } else if (hours >= 18 && hours < 21) {\n      timeSlot = \"21:00:00\";\n    }\n\n    let json = data.filter(c => {\n      let time = c.dt_txt.split(\" \")[1];\n      if (time === timeSlot) return c;\n    });\n    this.setState({\n      forecast: json\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n\n    if (this.state.forecast) {\n      cards = this.state.forecast.map(details => {\n        return __jsx(WeatherReport, {\n          key: id++,\n          time: this.formatHour(details.list.dt_txt),\n          date: this.formatDate(details.list.dt_txt),\n          maxTemp: details.list.main.temp_max,\n          minTemp: details.list.main.temp_min,\n          humidity: details.list.main.humidity,\n          description: details.list.weather[0].description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.activeCity)))\n    /* <Row>\r\n        <Col lg={12}>\r\n            <Row>\r\n                \r\n            </Row>\r\n        </Col>\r\n    </Row>\r\n    <Row>\r\n        {cards}\r\n    </Row>\r\n    </Container> */\n    ;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","WeatherReport","Index","Component","constructor","props","apiUrl","apiKey","state","activeCity","forecast","apiRequest","bind","formatDate","formatHour","getData","componentDidMount","cityName","weatherUrl","get","then","res","data","catch","err","console","log","dateTxt","month","date","split","parseInt","Date","hours","getHours","timeSlot","json","filter","c","time","dt_txt","setState","render","cards","id","map","details","list","main","temp_max","temp_min","humidity","weather","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport WeatherReport from \"../components/WeatherReport\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apiUrl =\r\n      \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\r\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      forecast: null\r\n    };\r\n    this.apiRequest = this.apiRequest.bind(this);\r\n    this.formatDate = this.formatDate.bind(this);\r\n    this.formatHour = this.formatHour.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.apiRequest(this.state.activeCity);\r\n  }\r\n\r\n  async apiRequest(cityName) {\r\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\r\n    await axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        this.getData(res.data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  formatDate(dateTxt) {\r\n    const month = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = dateTxt.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${month[date[1]]}`;\r\n  }\r\n\r\n  formatHour(dateTxt) {\r\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  getData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeSlot = \"\";\r\n\r\n    if (hours >= 0 && hours < 3) {\r\n        timeSlot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n        timeSlot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n        timeSlot = \"09:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n        timeSlot = \"12:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n        timeSlot = \"15:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n        timeSlot = \"18:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n        timeSlot = \"21:00:00\";\r\n    }\r\n\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeSlot) return c;\r\n    });\r\n    this.setState({\r\n      forecast: json\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(details => {\r\n        return (\r\n          <WeatherReport\r\n            key={id++}\r\n            time={this.formatHour(details.list.dt_txt)}\r\n            date={this.formatDate(details.list.dt_txt)}\r\n            maxTemp={details.list.main.temp_max}\r\n            minTemp={details.list.main.temp_min}\r\n            humidity={details.list.main.humidity}\r\n            description={details.list.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"section\">\r\n        <div className=\"container\">\r\n          <h4>{this.state.activeCity}</h4>\r\n        </div>\r\n      </div>\r\n            /* <Row>\r\n                <Col lg={12}>\r\n                    <Row>\r\n                        \r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {cards}\r\n            </Row>\r\n        </Container> */\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}