{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather-app\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport { Row } from \"react-grid-system\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport SearchCity from \"../components/SearchCity\";\nimport UnitToggle from \"../components/UnitToggle\";\nimport \"../styles/styles.scss\";\nconst WEATHER_API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\nconst WEATHER_API_URL = \"http://api.openweathermap.org/data/2.5\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeCity: \"Kuala Lumpur\",\n      unit: \"metric\",\n      forecast: null\n    };\n    this.APIRequest = this.APIRequest.bind(this);\n    this.retrieveData = this.retrieveData.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n    this.toggleUnit = this.toggleUnit.bind(this);\n    this.getDay = this.getDay.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n  } // Mount original city\n\n\n  async componentDidMount() {\n    await this.APIRequest(this.state.activeCity);\n  } // OpenWeatherMap API request\n\n\n  async APIRequest(cityName) {\n    const forecastUrl = `${WEATHER_API_URL}/forecast?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\n    await axios.get(forecastUrl).then(res => {\n      this.retrieveData(res.data.list);\n    }).catch(error => {\n      console.log(error);\n    });\n    const weatherUrl = `${WEATHER_API_URL}/weather?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\n    axios.get(weatherUrl).then(res => {\n      const detail = res.data;\n      this.setState({\n        city: detail.name,\n        temperature: detail.main.temp,\n        description: detail.weather[0].description,\n        feels_like: detail.main.feels_like,\n        humidity: detail.main.humidity,\n        highTemp: detail.main.temp_max,\n        lowTemp: detail.main.temp_min,\n        country: detail.sys.country,\n        windspeed: detail.wind.speed\n      });\n    });\n  }\n  /* Display date in the format of DD/MM/YYYY */\n\n\n  formatDate(dateData) {\n    let date = dateData.split(\" \")[0].split(\"-\");\n    return `${date[2]}/${date[1]}/${date[0]}`;\n  } // Display the week's day for weather forecast\n\n\n  getDay(date) {\n    let newDate = new Date();\n    const weekday = date * 1000;\n    return newDate.setTime(weekday);\n  }\n  /* Display weather forecast for the next five days. To simplify it, only the weather at 12 noon\r\n     will be displayed. */\n\n\n  retrieveData(data) {\n    const forecastData = data.filter(reading => reading.dt_txt.includes(\"12:00:00\"));\n    this.setState({\n      forecast: forecastData\n    });\n  } // Change Celsius to Fahrenheit and vice versa\n\n\n  toggleUnit() {\n    if (this.state.unit === \"metric\") {\n      this.setState({\n        unit: \"imperial\"\n      });\n    } else {\n      this.setState({\n        unit: \"metric\"\n      });\n    }\n  }\n\n  submitHandler(input) {\n    input.preventDefault();\n    this.APIRequest(this.state.activeCity);\n  }\n\n  changeHandler(input) {\n    input.preventDefault();\n    this.setState({\n      activeCity: input.target.value\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n\n    if (this.state.forecast) {\n      cards = this.state.forecast.map(data => {\n        return __jsx(WeatherInfo, {\n          key: id++,\n          date: this.formatDate(data.dt_txt),\n          day: this.getDay(data.dt),\n          maxTemp: data.main.temp_max,\n          minTemp: data.main.temp_min,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n          unit: this.state.unit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Weather Application\")), __jsx(SearchCity, {\n      changeHandler: this.changeHandler,\n      submitHandler: this.submitHandler,\n      activeCity: this.state.activeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), __jsx(CurrentWeather, {\n      city: this.state.city,\n      temperature: this.state.temperature,\n      description: this.state.description,\n      feels_like: this.state.feels_like,\n      highTemp: this.state.highTemp,\n      lowTemp: this.state.lowTemp,\n      humidity: this.state.humidity,\n      country: this.state.country,\n      windspeed: this.state.windspeed,\n      unit: this.state.unit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), __jsx(UnitToggle, {\n      toggleUnit: this.toggleUnit,\n      unit: this.state.unit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"column tile is-ancestor is-centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"tile is-child\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, cards))))))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather-app/pages/index.js"],"names":["React","axios","Head","Row","WeatherInfo","CurrentWeather","SearchCity","UnitToggle","WEATHER_API_KEY","WEATHER_API_URL","Index","Component","constructor","props","state","activeCity","unit","forecast","APIRequest","bind","retrieveData","submitHandler","changeHandler","toggleUnit","getDay","formatDate","componentDidMount","cityName","forecastUrl","get","then","res","data","list","catch","error","console","log","weatherUrl","detail","setState","city","name","temperature","main","temp","description","weather","feels_like","humidity","highTemp","temp_max","lowTemp","temp_min","country","sys","windspeed","wind","speed","dateData","date","split","newDate","Date","weekday","setTime","forecastData","filter","reading","dt_txt","includes","input","preventDefault","target","value","render","cards","id","map","dt","icon"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Head from \"next/head\";\r\nimport { Row } from \"react-grid-system\";\r\n\r\nimport WeatherInfo from \"../components/WeatherInfo\";\r\nimport CurrentWeather from \"../components/CurrentWeather\";\r\nimport SearchCity from \"../components/SearchCity\";\r\nimport UnitToggle from \"../components/UnitToggle\";\r\n\r\nimport \"../styles/styles.scss\";\r\n\r\nconst WEATHER_API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\nconst WEATHER_API_URL = \"http://api.openweathermap.org/data/2.5\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      unit: \"metric\",\r\n      forecast: null\r\n    };\r\n    this.APIRequest = this.APIRequest.bind(this);\r\n    this.retrieveData = this.retrieveData.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n    this.toggleUnit = this.toggleUnit.bind(this);\r\n    this.getDay = this.getDay.bind(this);\r\n    this.formatDate = this.formatDate.bind(this);\r\n  }\r\n\r\n  // Mount original city\r\n  async componentDidMount() {\r\n    await this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  // OpenWeatherMap API request\r\n  async APIRequest(cityName) {\r\n    const forecastUrl = `${WEATHER_API_URL}/forecast?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\r\n    await axios\r\n      .get(forecastUrl)\r\n      .then(res => {\r\n        this.retrieveData(res.data.list);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    const weatherUrl = `${WEATHER_API_URL}/weather?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\r\n    axios.get(weatherUrl).then(res => {\r\n      const detail = res.data;\r\n      this.setState({\r\n        city: detail.name,\r\n        temperature: detail.main.temp,\r\n        description: detail.weather[0].description,\r\n        feels_like: detail.main.feels_like,\r\n        humidity: detail.main.humidity,\r\n        highTemp: detail.main.temp_max,\r\n        lowTemp: detail.main.temp_min,\r\n        country: detail.sys.country,\r\n        windspeed: detail.wind.speed\r\n      });\r\n    });\r\n  }\r\n\r\n  /* Display date in the format of DD/MM/YYYY */\r\n  formatDate(dateData) {\r\n    let date = dateData.split(\" \")[0].split(\"-\");\r\n    return `${date[2]}/${date[1]}/${date[0]}`;\r\n  }\r\n\r\n  // Display the week's day for weather forecast\r\n  getDay(date) {\r\n    let newDate = new Date();\r\n    const weekday = date * 1000;\r\n    return newDate.setTime(weekday);\r\n  }\r\n\r\n  /* Display weather forecast for the next five days. To simplify it, only the weather at 12 noon\r\n     will be displayed. */\r\n  retrieveData(data) {\r\n    const forecastData = data.filter(reading =>\r\n      reading.dt_txt.includes(\"12:00:00\")\r\n    );\r\n    this.setState({\r\n      forecast: forecastData\r\n    });\r\n  }\r\n\r\n  // Change Celsius to Fahrenheit and vice versa\r\n  toggleUnit() {\r\n    if (this.state.unit === \"metric\") {\r\n      this.setState({\r\n        unit: \"imperial\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        unit: \"metric\"\r\n      });\r\n    }\r\n  }\r\n\r\n  submitHandler(input) {\r\n    input.preventDefault();\r\n    this.APIRequest(this.state.activeCity);\r\n  }\r\n\r\n  changeHandler(input) {\r\n    input.preventDefault();\r\n    this.setState({\r\n      activeCity: input.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(data => {\r\n        return (\r\n          <WeatherInfo\r\n            key={id++}\r\n            date={this.formatDate(data.dt_txt)}\r\n            day={this.getDay(data.dt)}\r\n            maxTemp={data.main.temp_max}\r\n            minTemp={data.main.temp_min}\r\n            humidity={data.main.humidity}\r\n            description={data.weather[0].description}\r\n            icon={data.weather[0].icon}\r\n            unit={this.state.unit}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        <Head>\r\n          <title>Weather Application</title>\r\n        </Head>\r\n        <SearchCity\r\n          changeHandler={this.changeHandler}\r\n          submitHandler={this.submitHandler}\r\n          activeCity={this.state.activeCity}\r\n        />\r\n        <CurrentWeather\r\n          city={this.state.city}\r\n          temperature={this.state.temperature}\r\n          description={this.state.description}\r\n          feels_like={this.state.feels_like}\r\n          highTemp={this.state.highTemp}\r\n          lowTemp={this.state.lowTemp}\r\n          humidity={this.state.humidity}\r\n          country={this.state.country}\r\n          windspeed={this.state.windspeed}\r\n          unit={this.state.unit}\r\n        />\r\n        <UnitToggle toggleUnit={this.toggleUnit} unit={this.state.unit} />\r\n        <br />\r\n        <div className=\"section\">\r\n          <div className=\"container\">\r\n            <div className=\"columns\">\r\n              <div className=\"column tile is-ancestor is-centered\">\r\n                <div className=\"tile\">\r\n                  <div className=\"tile is-child\">\r\n                    <Row>{cards}</Row>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}