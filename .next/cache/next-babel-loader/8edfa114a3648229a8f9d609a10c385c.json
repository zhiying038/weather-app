{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yoh Zhi Ying\\\\Desktop\\\\weather\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Container, Row, Col } from 'react-grid-system';\nimport WeatherReport from \"../components/WeatherReport\";\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.apiUrl = \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\n    this.state = {\n      activeCity: \"Kuala Lumpur\",\n      forecast: null\n    };\n    this.apiRequest = this.apiRequest.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.apiRequest(this.state.activeCity);\n  }\n\n  async apiRequest(cityName) {\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\n    axios.get(weatherUrl).then(res => {\n      this.getData(res.data.list);\n    }).catch(err => console.log(err));\n  }\n\n  formatDate(dateTxt) {\n    const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let date = dateTxt.split(\" \")[0].split(\"-\");\n    return `${date[2]} ${month[date[1]]}`;\n  }\n\n  formatHour(dateTxt) {\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\n  }\n\n  getData(data) {\n    let date = new Date();\n    let hours = date.getHours();\n    let timeSlot = \"\";\n\n    if (hours >= 0 && hours < 3) {\n      timeSlot = \"00:00:00\";\n    } else if (hours >= 3 && hours < 6) {\n      timeSlot = \"03:00:00\";\n    } else if (hours >= 6 && hours < 9) {\n      timeSlot = \"09:00:00\";\n    } else if (hours >= 9 && hours < 12) {\n      timeSlot = \"12:00:00\";\n    } else if (hours >= 12 && hours < 15) {\n      timeSlot = \"15:00:00\";\n    } else if (hours >= 15 && hours < 18) {\n      timeSlot = \"18:00:00\";\n    } else if (hours >= 18 && hours < 21) {\n      timeSlot = \"21:00:00\";\n    }\n\n    let json = data.filter(c => {\n      let time = c.dt_txt.split(\" \")[1];\n      if (time === timeSlot) return c;\n    });\n    this.setState({\n      forecast: json\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n\n    if (this.state.forecast) {\n      cards = this.state.forecast.map(c => {\n        return __jsx(WeatherReport, {\n          key: id++,\n          time: this.formatHour(c.dt_txt),\n          date: this.formatDate(c.dt_txt),\n          maxTemp: c.main.temp_max,\n          minTemp: c.main.temp_min,\n          humidity: c.main.humidity,\n          description: c.weather[0].description,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      });\n    }\n\n    return __jsx(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, __jsx(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, __jsx(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.activeCity)))), __jsx(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, cards));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yoh Zhi Ying/Desktop/weather/pages/index.js"],"names":["React","axios","Container","Row","Col","WeatherReport","Index","Component","constructor","props","apiUrl","apiKey","state","activeCity","forecast","apiRequest","bind","componentDidMount","cityName","weatherUrl","get","then","res","getData","data","list","catch","err","console","log","formatDate","dateTxt","month","date","split","formatHour","parseInt","Date","hours","getHours","timeSlot","json","filter","c","time","dt_txt","setState","render","cards","id","map","main","temp_max","temp_min","humidity","weather","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Container, Row, Col} from 'react-grid-system';\r\nimport WeatherReport from \"../components/WeatherReport\";\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apiUrl =\r\n      \"http://api.openweathermap.org/data/2.5/forecast?units=metric&\";\r\n    this.apiKey = \"b71deb2566d82e77a5e670d0d3771d2a\";\r\n    this.state = {\r\n      activeCity: \"Kuala Lumpur\",\r\n      forecast: null\r\n    };\r\n    this.apiRequest = this.apiRequest.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.apiRequest(this.state.activeCity);\r\n  }\r\n\r\n  async apiRequest(cityName) {\r\n    const weatherUrl = `${this.apiUrl}q=${cityName}&appid=${this.apiKey}`;\r\n    axios\r\n      .get(weatherUrl)\r\n      .then(res => {\r\n        this.getData(res.data.list);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  formatDate(dateTxt) {\r\n    const month = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    let date = dateTxt.split(\" \")[0].split(\"-\");\r\n    return `${date[2]} ${month[date[1]]}`;\r\n  }\r\n\r\n  formatHour(dateTxt) {\r\n    return parseInt(dateTxt.split(\" \")[1].split(\":\")[0]);\r\n  }\r\n\r\n  getData(data) {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let timeSlot = \"\";\r\n\r\n    if (hours >= 0 && hours < 3) {\r\n        timeSlot = \"00:00:00\";\r\n    } else if (hours >= 3 && hours < 6) {\r\n        timeSlot = \"03:00:00\";\r\n    } else if (hours >= 6 && hours < 9) {\r\n        timeSlot = \"09:00:00\";\r\n    } else if (hours >= 9 && hours < 12) {\r\n        timeSlot = \"12:00:00\";\r\n    } else if (hours >= 12 && hours < 15) {\r\n        timeSlot = \"15:00:00\";\r\n    } else if (hours >= 15 && hours < 18) {\r\n        timeSlot = \"18:00:00\";\r\n    } else if (hours >= 18 && hours < 21) {\r\n        timeSlot = \"21:00:00\";\r\n    }\r\n\r\n    let json = data.filter(c => {\r\n      let time = c.dt_txt.split(\" \")[1];\r\n      if (time === timeSlot) return c;\r\n    });\r\n    this.setState({\r\n      forecast: json\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let cards = \"\";\r\n    let id = 1;\r\n    if (this.state.forecast) {\r\n      cards = this.state.forecast.map(c => {\r\n        return (\r\n          <WeatherReport\r\n            key={id++}\r\n            time={this.formatHour(c.dt_txt)}\r\n            date={this.formatDate(c.dt_txt)}\r\n            maxTemp={c.main.temp_max}\r\n            minTemp={c.main.temp_min}\r\n            humidity={c.main.humidity}\r\n            description={c.weather[0].description}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <Row>\r\n                        <h4>{this.state.activeCity}</h4>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {cards}\r\n            </Row>\r\n        </Container>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}